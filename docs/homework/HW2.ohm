canadianPostalCode {
    program = postalCode
    postalCode = firstPart char " " secondPart
    secondPart = digit char digit
    firstPart = ~"M0" char digit 

    char = "A" | "B" | "C" | "E" | "G" | "H" | "J" | "K" | "L" | "M" | "N" | "P" | "R" | "S" | "T" | "V" | "X" | "Y"
}

visa {
    program = visanum
    visanum = "4" fifteend --fifteen
    	 | "4" twelved --twelve
    twelved = digit digit digit digit digit digit digit digit digit digit digit digit
    fifteend = digit digit digit digit digit digit digit digit digit digit digit digit digit digit digit
}

masterCard {
    program = mastercardnum
    mastercardnum = fiftys fourteend --fourteen
               | twothousands twelved --twelve
    fourteend = digit digit digit digit digit digit digit digit digit digit digit digit digit digit
    twelved = digit digit digit digit digit digit digit digit digit digit digit digit
    fiftys = "5" "1".."5"
    twothousands = "2" "2" "2" "1".."9"     //2221-2229
    | "2" "2" "3".."9" digit     			//2230-2299
    | "2" "3".."6" digit digit   			//2300-2699
    | "2" "7" "0" "0".."9"          		//2700-2709
    | "2" "7" "1" "0".."9"         			//2710-2719
    | "2" "7" "2" "0"                       //2720
}


notThreeEndingInOO {
    program = sequence
    sequence = ~notallowed letter*
    notallowed = letter allo allo end
    allo = caseInsensitive<"o">
}


divisibleBy16 {
    divisby16 = multiplebin "0" "0" "0" "0" "0"* --fourplus
    | "0" "0" "0" "0" --four
    | "0" "0" "0" --three
    | "0" "0" --two
    | "0" --one
    bin = "0"* "1"    
    multiplebin = bin*
}

eightThroughThirtyTwo {
    eightthirtytwo = "8" 
    | "9" 
    | tens 
    | twenties 
    | "30"
    | "31"
    | "32"
    tens = "1" "0".."9"
    twenties = "2" "0".."9"
}

eightthruthirtytwo {
    ok = range
    range = "8" end --eight
    | "9" end       --nine
    | "1" digit end --tenthroughnineteen
    | "2" digit end --twentythroughtwentynine
    | "3" "0" end   --thirty
    | "3" "1" end   --thirtytwo
    | "3" "2" end   --thirtythree
}

NotPy {
    valid = ~notvalid any*
    notvalid = "pyc"~any
    | "python"~any
    | "pycharm"~any
}

restrictedFloats {
    program = float
    float = integer dec? exponent
    integer = digit+
    dec = "." digit*
    exponent = "e" sign? digit digit? digit?
    sign = "+" | "-"
}

palindromes2358 {
  Palindrome  = pal8 | pal5 | pal3 | pal2 
  pal8 = "a" pal6 "a"
        | "b" pal6 "b"
        | "c" pal6 "c"
  pal6 = "a" pal4 "a"
        | "b" pal4 "b"
        | "c" pal4 "c"
  pal5 = "a" pal3 "a"
        | "b" pal3 "b"
        | "c" pal3 "c"
  pal4 = "a" paltwo "a"
        | "b" paltwo "b"
        | "c" paltwo "c"
  pal3 = "a" char? "a"
  	   | "b" char? "b"
       | "c" char? "c"
  pal2 = "a" "a" "a"? 		--a
  	   | "b" "b" "b"?		--b
       | "c" "c" "c"? 		--c
  paltwo = "a" "a" 
  	   | "b" "b" 
       | "c" "c"
  char = "a" | "b" | "c"
}


Problem2 {
    Program = Funcdec* Exp
    Funcdec = func id "(" ListOf<id, ","> ")" Body
    Body = NonemptyListOf<Exp, ";"> endchar
    
    Exp = Exp1 if Exp1 else Exp  			--conditional
    		| Exp1
    Exp1 = Exp1 ("+" | "-") Exp2 				--additive
    | Exp2 
    Exp2 = Exp2 ("" | "/" | "%") Exp3 		--multiplicative
    | Exp3
    Exp3 = "-"? Exp4                        --negation
    Exp4 = Exp5 "!"?                        --factorial
    Exp5 = num | strlit | Call | id | Parens
    
    func = "func" ~idchar
    endchar = "end" ~idchar
    if = "if" ~idchar
    else = "else" ~idchar
    keyword = func | endchar | if | else

    id = ~keyword (letter|"@") idchar*
    idchar = alnum | "_" | "@" | "$"
    
    num = digit+ ("." digit+)? (("e" | "E") ("+" | "-")? digit+)?
    strlit = "\"" char* "\""
    char = "\\n" 			    --newlineescape
         	|"\\\\"		--doublebackslash
         	|"\\'"				--backslashsingle
         	|"\\\""			     --backslashdouble
         	|"\\u{" hexDigit hexDigit? hexDigit? hexDigit? hexDigit? hexDigit?"}" --usecape
    	 	| ~"\"" any
    Parens = "(" Exp ")"
    Call = id "[" Args "]"
    Args = ListOf<Exp, ",">
    space += "--" (~"\n" any)*	    --comment

}