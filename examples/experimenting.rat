// Doing simple syntax experiments for rat parser
// I'm just testing these out in the general order I see them on the rat.ohm file

// print statement
print("testing some rat language");


[int] x  = [];

// testing out the variable declaration
int x = 8;
int i = 0;
const int y = 10;

print("x = ");

print(x);

print("y = ");
print(y);

while(i < 4) { x += 1; i += 1; }

[str] fatrat = ["f", "a", "t", "r", "a", "t"];
print(x); 
i = 0;
x = 8;

// for loop iterable object
for letter in fatrat { print(letter); }

// for loop inclusive range
for j in 1...10 {
  print(j);
  if j > 8 {
    break;
  }
}

// for loop exclusive range
for j in 1..<5{
  print(j);
}

// if statement syntax
if x < 4 {
  print("x is less than 4");
} else if x < 7 {
  print("x is less than 7");
} else {
  pass;
}

// printing a dictionary
print({ "AZ": "Phoenix", "FL":"Tallahasee" });

// dictionaries
{int:bool} m = {3:false};

// Implementing Optional Type
str? boss = some "Tina";		// ? indicates optional, some wraps variable in optional
boss = no str;                              // no indicates a null or None type

// new line escapes
print("Hello \n World");

// printing the index of an iterable object
[bool] a = [true, false, true];
print (a[1]);


// IF YOU HAVE AN OPINION, YOU KNOW WHERE TO FIND ME
[int] f(x:int) {
  [int] f_arr = [];
  for i in 0...x {
  	f_arr += [[]];
    for j in 0..<7 {
      f_arr[i] += [i];
    }
  }
  return f_arr;
}

// For when a function returns an array, and we want to index the array in place.
print( f(x)[1][5] );


// Indexable Dictionaries
print ({ "CA": "Sacramento", "AK":"Juneau" }["CA"]); 


int z = x + y;        // z = 22
z = z + 1;                  // z = 23
